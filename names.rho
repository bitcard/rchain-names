new
  basket,
  records,
  update,
  create,
  entry,
  hashname,
  verify,
  test,
  entryUriCh,
  updateUriCh,
  insertArbitrary(`rho:registry:insertArbitrary`),
  stdout(`rho:io:stdout`),
  params(`rho:deploy:params`),
  deployerId(`rho:rchain:deployerId`),
  deployerIdCh
in {

  // Send an initially empty map
  records!({}) |

  deployerIdCh!!(*deployerId) |

  // Update a record
  contract update(record, return) = {
    stdout!("update") |
    for (current <- records) {
      stdout!(*current) |
      match *current.contains(*record.get("name")) {
        true => {
          return!("success: record updated") |
          records!(*current.set(*record.get("name"), *record))
        }
        false => {
          return!("error: name not found") |
          records!(*current)
        }
      }
    }
  } |

  // create a record
  contract create(record, return) = {
    stdout!("create") |
    for (current <- records) {
      match *current.contains(*record.get("name")) {
      true => {
        return!("error: name " ++ *record.get("name") ++ " already taken") |
        records!(*current)
      }
      false => {
        return!("success: record " ++ *record.get("name") ++ " created") |
        records!(*current.set(*record.get("name"), *record))
      }}
    }
  } |

  contract entry(action, return) = {
    match *action.get("type") {
      "CREATE" => {
        create!(*action.get("payload"), *return)
      }
      "UPDATE" => {
        update!(*action.get("payload"), *return)
      }
    }
  } |

  insertArbitrary!(*entry, *entryUriCh) |

  for (uri <- entryUriCh) {
    stdout!({
      "registry_uri": *uri,
      "unforgeable_name": *records
    }) |
    basket!({
      "registry_uri": *uri,
      "unforgeable_name": *records
    })
  }
}
