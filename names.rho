new records, addrecord, updaterecord, initial, verify, hashdomain, stdout(`rho:io:stdout`) in {
  initial!({}) |
  for (initialVal <- initial) {
    records!(*initialVal) |

    for (recordtoadd <- addrecord) {
      for (current <- records) {
        match *current.contains(*recordtoadd.get("name")) {
          true => {
            stdout!("error: name " ++ *recordtoadd.get("name") ++ " already taken") |
            records!(*current)
          }
          false => {
            stdout!("success: record " ++ *recordtoadd.get("name") ++ " added") |
            records!(*current.set(*recordtoadd.get("name"), *recordtoadd))
          }
        }
      }
    } |

    for (v <= @"addrecord") {
      addrecord!(*v)
    } |


    for (recordtoupdate <- updaterecord) {
      for (current <- records) {
        match *current.contains(*recordtoupdate.get("name")) {
          true => {
            @"keccak256Hash"!(*recordtoupdate.get("name").toUtf8Bytes(), *hashdomain) |
            for (hash <- hashdomain) {
                stdout!(*hash) |
                @"ed25519Verify"!(
                  *hash,
                  *recordtoupdate.get("signature").hexToBytes(),
                  *current.get(*recordtoupdate.get("name")).get("publickey").hexToBytes(),
                  *verify
                )
            } |
            for (verified <- verify) {
              match *verified {
                true => {
                  stdout!("success: record updated") |
                  records!(*current.set(*recordtoupdate.get("name"), *recordtoupdate))
                }
                false => {
                  stdout!("error: invalid signature") |
                  records!(*current)
                }
              }
            }
          }
          false => {
              stdout!("error: name not found") |
              records!(*current)
          }
        }
      }
    } |

    for (v <= @"updaterecord") {
      updaterecord!(*v)
    }
  }
}