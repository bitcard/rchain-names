new records, update, add, hashdomain, verify, insertArbitrary(`rho:registry:insertArbitrary`), stdout(`rho:io:stdout`) in {
  // Send an initially empty map
  records!({}) | 
  
  // Update a record
  contract update(record, return) = {
    for (current <- records) {
      match *current.contains(*record.get("name")) {
        true => {
          @"keccak256Hash"!(*record.get("name").toUtf8Bytes(), *hashdomain) |
          for (hash <- hashdomain) {
              @"ed25519Verify"!(
                *hash,
                *record.get("signature").hexToBytes(),
                *current.get(*record.get("name")).get("publickey").hexToBytes(),
                *verify
              )
          } |
          for (verified <- verify) {
            match *verified {
              true => {
                return!("success: record updated") |
                records!(*current.set(*record.get("name"), *record))
              }
              false => {
                return!("error: invalid signature") |
                records!(*current)
              }
            }
          }
        }
        false => {
            return!("error: name not found") |
            records!(*current)
        }
      }
    }
  } |

  // Add a record
  contract add(record, return) = {
    for (current <- records) {
      match *current.contains(*record.get("name")) {
      true => {
        return!("error: name " ++ *record.get("name") ++ " already taken") |
        records!(*current)
      }
      false => {
        return!("success: record " ++ *record.get("name") ++ " added") |
        records!(*current.set(*record.get("name"), *record))
      }}
    }
  } |

  // Register contracts
  new updateUriCh, addUriCh in {
    insertArbitrary!(bundle+{*update}, *updateUriCh) |
    insertArbitrary!(bundle+{*add}, *addUriCh)
  } |

  // Hack to get the underlying unforgeable names
  // A nicer way is to use the peviewUnforgeableNames api that @dckc wrote
  // An even nicer solution would be rearchitecting the node a bit #OutOfScope
  stdout!([*update, *add])
}
