new
  basket,
  nodes,
  nodesReaderCh,
  remove,
  add,
  entry,
  hashname,
  verify,
  test,
  entryUriCh,
  nodesUriCh,
  updateUriCh,
  deployerIdCh,
  insertArbitrary(`rho:registry:insertArbitrary`),
  stdout(`rho:io:stdout`),
  deployerId(`rho:rchain:deployerId`)
in {

  deployerIdCh!(*deployerId) |

  // Send initial value
  nodes!({
      "b1.dappy.tech": {
          "url": "b1.dappy.tech",
          "name": "Node 1",
          "contact": "hey@joe.com",
          "location": "Toulouse, fr",
          "cert": "-----BEGIN CERTIFICATE-----
MIIDkzCCAnugAwIBAgIUKsmCdRcA7G6lfYXIaC03HO3BebEwDQYJKoZIhvcNAQEL
BQAwWTELMAkGA1UEBhMCRlIxDzANBgNVBAgMBkZyYW5jZTERMA8GA1UEBwwIVG91
bG91c2UxDjAMBgNVBAoMBUZBQkNPMRYwFAYDVQQDDA1iMS5kYXBweS50ZWNoMB4X
DTIwMDMwNDE3MzUxOVoXDTIxMDMwNDE3MzUxOVowWTELMAkGA1UEBhMCRlIxDzAN
BgNVBAgMBkZyYW5jZTERMA8GA1UEBwwIVG91bG91c2UxDjAMBgNVBAoMBUZBQkNP
MRYwFAYDVQQDDA1iMS5kYXBweS50ZWNoMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8A
MIIBCgKCAQEAzMgA4K1KOL5a9CFOhJ7w+K8vWcaVmRyphcysvhNXXb3WqorhG7i5
HoFztIlDjGvpQFViqQmZUs4KC/QBJ8NDnsHM66eqyamCuohWpXV8yQSyzjH+A67J
pltRauEU7qQWCj7NXigdfePF1OrkKm/XHnsvwaw1xoNGxKWW/bne/9zeKdwNyOXB
JGuLm6FgT/TmgRD4bmwvt+H9/07moLjqsimAi802dEQkTxyfTRcpv4x1rKflWyfe
ABuJrpIaBxAT/LdHMzcRKdGVRvxAV4+rLyQ022FS9X5W3/jZmD6RkKKMhrhXgGLH
6R6lz5So6B8MYMoOPHwqaGUpTfSv3CDpOQIDAQABo1MwUTAdBgNVHQ4EFgQUhKzA
v+kUx8S8xc9pC3sPcB9skh0wHwYDVR0jBBgwFoAUhKzAv+kUx8S8xc9pC3sPcB9s
kh0wDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEARQMsj7QRefXS
jB2cuPPAlcQnGfnJb239OubUC2k0CtazEhvyypwZkGu38KnUqD8sNw99ACJjXQ1N
Eu8XxP7NXAAKS7WlPfoxz49H7x26VIcTJRXszFxJ6IzpQb0rcqz3Jpy1iyANb9zz
ibnuP39ev1lzYfUNmS3k5fsvzl2Yzkwjz3jcr7zWoLxLeoznWC8e0v0eFIp9WwdE
Q8RJLrV/+OORtjjM8InWI1BhHrxC/BEiR9KGj86pohQ+DbK5xWlJJE5x0FC70jI3
hYC/xCXfAxQRUfkTmgL0LkTU1T8KqA8IWD1Xx1FZhJQcKfIY+STfgSeqJNoXJFxD
4/rQesitRw==
-----END CERTIFICATE-----"
      }
  }) |
  
  // create a node
  contract add(node, return) = {
    stdout!("adding node") |
    for (current <- nodes) {
      match *current.contains(*node.get("url")) {
        true => {
          return!("error: url " ++ *node.get("url") ++ " already taken") |
          nodes!(*current)
        }
        false => {
          return!("success: node " ++ *node.get("url") ++ " created") |
          nodes!(*current.set(*node.get("url"), *node))
        }
      }
    }
  } |

  for (@(action, return) <= entry) {
    match action.get("type") {
      "ADD" => {
        add!(action.get("payload"), return)
      }
      "REMOVE" => {
        remove!(action.get("payload"), return)
      }
    }
  } |

  insertArbitrary!(*entry, *entryUriCh) |
  insertArbitrary!(*nodesReaderCh, *nodesUriCh) |
  
  for (ch <= nodesReaderCh) {
    for (current <<- nodes) {
      ch!(*current)
    }
  } |

  for (entryUri <- entryUriCh; nodesUri <- nodesUriCh) {
    basket!({
      "entryRegistryUri": *entryUri,
      "nodesRegistryUri": *nodesUri,
      "nodesUnforgeableName": *nodes
    }) |
    stdout!({
      "entryRegistryUri": *entryUri,
      "nodesRegistryUri": *nodesUri,
      "nodesUnforgeableName": *nodes
    })
  }
}
